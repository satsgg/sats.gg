// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["fullTextSearch", "fullTextIndex", "interactiveTransactions"]
}

model User {
  id                   String       @id @default(uuid())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  lastLogin            DateTime?
  publicKey            String       @unique
  defaultZapAmount     Int          @default(1000)

  streams Stream[]
}

model UserAuth {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  challengeHash String   @unique
}

model Stream {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  userId String
  user User @relation(fields: [userId], references: [id])
  hlsUrl String?
  rtmpUrl String?
  streamKey String
  lightningAddress String?
  duration Int
  viewerCount Int @default(0)
  viewerCountUpdatedAt DateTime @default(now())
  // TODO: add nip 53 values?
  status StreamStatus @default(PENDING)
  variants StreamVariant[]
  invoices Invoice[]
}

// TODO: figure these out
// stream status vs creation status?
enum StreamStatus {
  PENDING
  PROVISIONING
  PROVISIONING_FAILED
  READY
  LIVE
  ENDED
}

model StreamVariant {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streamId String
  stream Stream @relation(fields: [streamId], references: [id])
  price Int
  height Int
  framerate Int
}

model Invoice {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  settledAt     DateTime?
  maxAgeSeconds Int
  description   String
  status        InvoiceStatus @default(OPEN)
  hash          String        @unique
  bolt11        String
  mSatsTarget   Int
  // mSatsSettled  Int?
  streamId String
  stream Stream @relation(fields: [streamId], references: [id])
}

enum InvoiceStatus {
  OPEN
  SETTLED
  CANCELED
  ACCEPTED
}